<?php
/** @file
 *
 * ScaffoldNewBundle is a BaseFortissimoCommand class.
 *
 * Created by Matt Butcher on 2011-06-15.
 */
namespace Villain\Bundles;
/**
 * Scaffold a new bundle.
 *
 * This programmatically creates a new bundle. Since this creates not only
 * files and directories, but actually executable files, it should be used
 * with extreme caution. It is recommended that this be used with `fort`
 * and similar CLI programs, but not from within the webapp.
 *
 * Note that whatever user executes PHP will need to have write permissions to bundles/
 * in order for this to work.
 *
 * @author Matt Butcher
 */
class ScaffoldNewBundle extends \BaseFortissimoCommand {

  public function expects() {
    return $this
      ->description('Create a new bundle')
      ->usesParam('name', 'The name of the new bundle to create.')
      ->withFilter('string')
      ->whichIsRequired()
      
      ->andReturns('Boolean value indicating success (TRUE) or failure (FALSE)')
    ;
  }

  public function doCommand() {
    
    $bundleName = $this->param('name');
    if (empty($bundleName)) {
      throw new \Villain\InterruptException('Bundle name cannot be empty.');
    }
    
    if (!Bundle::isValidName($bundleName)) {
      throw new \Villain\InterruptException('Illegal bundle name: ' . $bundleName);
    }
    
    $path = $this->createBundleDirectory($bundleName);
    $this->createBundleSubdirectories($path);
    $this->createBundlePHP($path, $bundleName);
    

    return TRUE;
  }
  
  protected function createBundleDirectory($name) {
    $path = Bundle::DIR . $name;
    if (!is_dir(Bundle::DIR)) {
      throw new \Villain\InterruptException('No bundle directory found at ' . Bundle::DIR);
    }
    
    if (!is_writable(Bundle::DIR)) {
      throw new \Villain\InterruptException('Permission error: Cannot write to ' . Bundle::DIR);
    }
    
    if (file_exists($path)) {
      throw new \Villain\InterruptException('Bundle already exists at ' . $path);
    }
    
    mkdir($path);
    
    return $path;
  }
  
  /**
   * Create the standard base directories and protect those that need it.
   */
  protected function createBundleSubdirectories($basePath) {
    
    $paths = array(
      '/src' => TRUE,
      '/test' => FALSE,
      '/doc' => FALSE,
      '/media' => TRUE,
      '/media/css' => TRUE,
      '/media/img' => TRUE,
      '/media/js' => TRUE,
      '/theme' => FALSE,
    );
    
    foreach ($paths as $path => $allow_browser_access) {
      $fullPath = $basePath . $path;
      mkdir($fullPath);
      if (!$allow_browser_access) {
        $this->addHTAccess($fullPath);
      }
    }
  }
  
  protected function createBundlePHP($path, $name) {
    $klass = __CLASS__;
    $code =<<<EOF
<?php
use \Villain\Bundles\Bundle;

Bundle::create('$name')
  ->description('Autogenerated by $klass. Change this.')
  ->version('1.0.0');
EOF;
    $f = fopen($path . '/bundle.php', 'w');
    fwrite($f, $code);
    fclose($f);
  }
  
  /**
   * Add an .htaccess file to a path.
   */
  protected function addHTAccess($directory) {
    $htaccess = 'Order Allow,Deny';
    $f = fopen($directory . '/.htaccess', 'w');
    fwrite($f, $htaccess);
    fclose($f);
  }
}

